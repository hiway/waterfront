#!/usr/bin/env node

var program    = require('commander')
var pkg        = require('../package.json')
var waterfront = require('../')

program
  .version(pkg.version)

program
  .command('broker')
  .description('start new message broker')
  .option('-p, --port <port>', 'specify the port [4100]', Number, 4100)
  .option('-H, --host <host>', 'specify the hostname [localhost]', String, "localhost")
  .action(function(program){
    waterfront.listen(program.port, program.host)
  })

program
  .command('agent <type>')
  .description('spin up pub agent for testing')
  .option('-p, --port <port>', 'specify the port [4100]', Number, 4100)
  .option('-H, --host <host>', 'specify the hostname [localhost]', String, "localhost")
  .action(function(type, program){

    var wf    = waterfront.connect(program.port, program.host)
    var sock  = wf.socket(type)

    switch(type){

    case "pub":
      setInterval(function(){
        process.stdout.write(".")
        sock.send({ "time": (+new Date) })
        //sock.send("vancouver", { "date": (+new Date) })
      }, 200)
    break;

    case "sub":
      sock.on("message", function(msg){
        console.log(msg)
      })
    break;

    case "pub-emitter":
      setInterval(function(){
        process.stdout.write(".")
        sock.emit("vancouver", { "date": (+new Date) })
      }, 500)
    break;

    case "sub-emitter":
      sock.on('*', function(channel, data){
        console.log(channel, data)
      })
    break;

    case "req":
      var payload = { start: +new Date }

      payload = { host: process.argv[4] }
      console.log(payload)
      sock.send(payload, function(rep){
        console.log(rep)
        process.exit()
      })
    break;

    case "rep":
      sock.on('message', function(data, callback){
        //process.stdout.write("R")
        console.log(data)
        callback({ manifest: {} })
      })
    break;

    case "push":
      setInterval(function(){
        process.stdout.write('.')
        sock.send({ "date" : (+new Date) })
      }, 200)
      sock.send({ "date" : (+new Date) })
    break;

    case "pull":
      sock.on("message", function(data){
        console.log(data)
      })
    break;

    default:
      console.log("not supported...")
    }

  })

program.parse(process.argv)

if(program.args.length < 1){
  program.help()
}

